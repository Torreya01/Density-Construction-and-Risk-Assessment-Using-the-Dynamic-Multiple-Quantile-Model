plot(return.ts, xlab = "Time", ylab = "Index",
main = "log-returns of FTSE 100 (2014-2024)")
summary_stats(apple_diff)
summary_stats(FTSE_diff)
# Set the tau values
vTau = seq(0.01, 0.99, length.out = 99)
# Fit the Apple data into model
Fit_apple = EstimateDMQ(vY = apple_diff, vTau = vTau,
iTau_star = 50,  # Median as reference
FixReference = TRUE,
fn.optimizer = fn.solnp)
# Save the Apple fit to RDS file
saveRDS(Fit_apple, file = "Data/Fitted_RDS/Fit_apple.rds")
# Fit the data into model
Fit_apple_new = EstimateDMQ(vY = apple_diff_new, vTau = vTau,
iTau_star = 50,  # Median as reference
FixReference = TRUE,
fn.optimizer = fn.solnp)
# Save the fit to RDS file
saveRDS(Fit_apple_new, file = "Data/Fitted_RDS/Fit_apple_new.rds")
# Read the RDS file fit
Fit_apple = readRDS(file = "Data/Fitted_RDS/Fit_apple.rds")
# Read the cleaned data
apple = read.csv("Data/Derived/apple_cleaned.csv")
# Read the RDS file fit
Fit_apple = readRDS(file = "Data/Fitted_RDS/Fit_apple.rds")
# Extract the quantiles from the fit and eliminate the first column
quantiles_apple = Fit_apple$lFilter$mQ
quantiles_apple = quantiles_apple[,-1]
apple = apple[-1, ]
# Extract the year from the Date column
apple$Year = year(apple$Date)
apple$Month = month(apple$Date)
# Read the kde results
kde_result_apple = readRDS(file = "Data/Fitted_RDS/kde_result_apple.rds")
# Combine all KDE results into a single data frame
kde_all_apple = do.call(rbind, kde_result_apple)
# Set color palette
colors = RColorBrewer::brewer.pal(12, "Set3")
colors
# Set camera eye
camera_eye = list(x = -1.5, y = 1.5, z = 0.3)
# Assuming 'years' is a vector of years to plot
years = unique(kde_all_apple$Year)
years
year = 2015
# Subset the data for the current year
kde_year = filter(kde_all, Year == year)
# Subset the data for the current year
kde_year = filter(kde_all_apple, Year == year)
# Aggregate data to ensure unique quantile values within each month
kde_year = kde_year %>%
group_by(Month_num, Quantile) %>%
summarize(Density = mean(Density), .groups = 'drop')
# Prepare the data by ensuring Month and Month_num are correctly formatted
kde_all_apple$Month <- factor(kde_all_apple$Month, levels = 1:12, labels = month.name)
kde_all_apple$Month_num <- as.numeric(kde_all_apple$Month)
# Set color palette
colours = RColorBrewer::brewer.pal(12, "Set3")
# Set camera eye
camera_eye = list(x = -1.5, y = 1.5, z = 0.3)
# Assuming 'years' is a vector of years to plot
years = unique(kde_all_apple$Year)
# Subset the data for the current year
kde_year = filter(kde_all_apple, Year == year)
# Aggregate data to ensure unique quantile values within each month
kde_year = kde_year %>%
group_by(Month_num, Quantile) %>%
summarize(Density = mean(Density), .groups = 'drop')
# Add jitter to avoid collinearity issues
kde_year$Quantile = kde_year$Quantile + rnorm(nrow(kde_year), sd = 1e-6)
kde_year$Month_num = kde_year$Month_num + rnorm(nrow(kde_year), sd = 1e-6)
# Interpolate to fill the grid
interp_data = akima::interp(x = kde_year$Quantile, y = kde_year$Month_num, z = kde_year$Density,
xo = quantiles, yo = months, duplicate = "mean")
# Subset the data for the current year
kde_year <- filter(kde_all_apple, Year == year)
# Initialize an empty plotly object
p <- plot_ly()
# Add each month as a separate trace
for (m in months) {
month_data <- filter(kde_year, Month_num == m)
p <- add_trace(p, data = month_data, x = ~Quantile, y = ~Month, z = ~Density,
type = 'scatter3d', mode = 'lines',
line = list(color = colors[m], width = 4),
name = m,
showlegend = TRUE)  # Use month names directly for the legend
}
# Layout with camera and legend configuration
p <- p %>% layout(#title = paste("Qauntile Density Plot in Year", year, "for Apple Inc log-returns"),
scene = list(
xaxis = list(title = "Quantile"),
yaxis = list(title = "Month"),
zaxis = list(title = "Density"),
camera = list(eye = list(x = -1, y = 2, z = 0.1))),
width = 700,  # Specify width as 1000 pixels
height = 560)
# Print the plot
print(p)
# Subset the data for the current year
kde_year = filter(kde_all_apple, Year == year)
# Aggregate data to ensure unique quantile values within each month
kde_year = kde_year %>%
group_by(Month_num, Quantile) %>%
summarize(Density = mean(Density), .groups = 'drop')
# Add jitter to avoid collinearity issues
kde_year$Quantile = kde_year$Quantile + rnorm(nrow(kde_year), sd = 1e-6)
kde_year$Month_num = kde_year$Month_num + rnorm(nrow(kde_year), sd = 1e-6)
# Interpolate to fill the grid
interp_data = akima::interp(x = kde_year$Quantile, y = kde_year$Month_num, z = kde_year$Density,
xo = Quantiles, yo = months, duplicate = "mean")
# Interpolate to fill the grid
interp_data = akima::interp(x = kde_year$Quantile, y = kde_year$Month_num, z = kde_year$Density,
xo = Quantile, yo = months, duplicate = "mean")
# Plot the surface
p = plot_ly(
x = interp_data$x,
y = month.name[interp_data$y],
z = interp_data$z,
type = "surface",
)
# Subset the data for the current year
kde_year <- filter(kde_all_apple, Year == year)
# Initialize an empty plotly object
p <- plot_ly()
# Add each month as a separate trace
for (m in months) {
month_data <- filter(kde_year, Month_num == m)
p <- add_trace(p, data = month_data, x = ~Quantile, y = ~Month, z = ~Density,
type = 'scatter3d', mode = 'lines',
line = list(color = colors[m], width = 4),
name = m,
showlegend = TRUE)  # Use month names directly for the legend
}
# Subset the data for the current year
kde_year <- filter(kde_all_apple, Year == year)
# Initialize an empty plotly object
p <- plot_ly()
# Add each month as a separate trace
for (m in months) {
month_data <- filter(kde_year, Month_num == m)
p <- add_trace(p, data = month_data, x = ~Quantile, y = ~Month, z = ~Density,
type = 'scatter3d', mode = 'lines',
line = list(color = colors[m], width = 4),
name = m,
showlegend = TRUE)  # Use month names directly for the legend
}
# Layout with camera and legend configuration
p <- p %>% layout(#title = paste("Qauntile Density Plot in Year", year, "for Apple Inc log-returns"),
scene = list(
xaxis = list(title = "Quantile"),
yaxis = list(title = "Month"),
zaxis = list(title = "Density"),
camera = list(eye = list(x = -1, y = 2, z = 0.1))),
width = 700,  # Specify width as 1000 pixels
height = 560)
# Print the plot
print(p)
# Subset the data for the current year
kde_year <- filter(kde_all_apple, Year == year)
# Initialize an empty plotly object
p <- plot_ly()
# Add each month as a separate trace
for (m in unique(kde_year$Month)) {
month_data <- filter(kde_year, Month == m)
p <- add_trace(p, data = month_data, x = ~Quantile, y = ~Month, z = ~Density,
type = 'scatter3d', mode = 'lines',
line = list(color = colors[m], width = 1.5),
name = m)  # Use month names directly for the legend
}
# Layout with camera and legend configuration
p <- p %>% layout(title = paste("3D Density Plot for Year", year),
scene = list(
xaxis = list(title = "Quantile"),
yaxis = list(title = "Month"),
zaxis = list(title = "Density"),
camera = list(eye = list(x = -1, y = 2, z = 0.3))),
legend = list(title = list(text = 'Months'), orientation = "v"))
# Print the plot
print(p)
# Subset the data for the current year
kde_year = filter(kde_all, Year == year)
# Initialize an empty plotly object
p = plot_ly()
source("C:/Users/13261/OneDrive/桌面/IC/Project/Code/Density/Density_plots.R", echo=TRUE)
# Subset the data for the current year
kde_year = filter(kde_all, Year == year)
# Initialize an empty plotly object
p = plot_ly()
# Subset the data for the current year
kde_year = filter(kde_all_apple, Year == year)
# Initialize an empty plotly object
p = plot_ly()
# Add each month as a separate trace
for (m in unique(kde_year$Month)) {
month_data = filter(kde_year, Month == m)
p = add_trace(p, data = month_data, x = ~Quantile, y = ~Month, z = ~Density,
type = 'scatter3d', mode = 'lines',
line = list(color = colors[m], width = 1.5),
name = m)  # Use month names directly for the legend
}
# Layout with camera and legend configuration
p = p %>% layout(title = paste("3D Density Plot for Year", year),
scene = list(
xaxis = list(title = "Quantile"),
yaxis = list(title = "Month"),
zaxis = list(title = "Density"),
camera = list(eye = list(x = -1, y = 2, z = 0.3))),
legend = list(title = list(text = 'Months'), orientation = "v"))
# Print the plot
print(p)
# Layout with camera and legend configuration
p = p %>% layout(title = paste("3D Density Plot for Year", year),
scene = list(
xaxis = list(title = "Quantile"),
yaxis = list(title = "Month"),
zaxis = list(title = "Density"),
camera = carema_eye,
legend = list(title = list(text = 'Months'), orientation = "v"))
# Print the plot
print(p)
# Subset the data for the current year
kde_year = filter(kde_all_apple, Year == year)
# Initialize an empty plotly object
p = plot_ly()
# Add each month as a separate trace
for (m in unique(kde_year$Month)) {
month_data = filter(kde_year, Month == m)
p = add_trace(p, data = month_data, x = ~Quantile, y = ~Month, z = ~Density,
type = 'scatter3d', mode = 'lines',
line = list(color = colors[m], width = 1.5),
name = m)  # Use month names directly for the legend
}
# Layout with camera and legend configuration
p = p %>% layout(title = paste("3D Density Plot for Year", year),
scene = list(
xaxis = list(title = "Quantile"),
yaxis = list(title = "Month"),
zaxis = list(title = "Density"),
camera = camera_eye),
legend = list(title = list(text = 'Months'), orientation = "v"))
# Print the plot
print(p)
# Layout with camera and legend configuration
p = p %>% layout(title = paste("3D Density Plot for Year", year),
scene = list(
xaxis = list(title = "Quantile"),
yaxis = list(title = "Month"),
zaxis = list(title = "Density"),
camera = list(eye = list(x = -1, y = 2, z = 0.3))),
legend = list(title = list(text = 'Months'), orientation = "v"))
# Print the plot
print(p)
# Layout with camera and legend configuration
p = p %>% layout(title = paste("3D Density Plot for Year", year),
scene = list(
xaxis = list(title = "Quantile"),
yaxis = list(title = "Month"),
zaxis = list(title = "Density"),
camera = list(eye = list(x = -1.5, y = 2, z = 0.3))),
legend = list(title = list(text = 'Months'), orientation = "v"))
# Layout with camera and legend configuration
p = p %>% layout(title = paste("3D Density Plot for Year", year),
scene = list(
xaxis = list(title = "Quantile"),
yaxis = list(title = "Month"),
zaxis = list(title = "Density"),
camera = list(eye = list(x = -1.5, y = 2, z = 0.3))),
legend = list(title = list(text = 'Months'), orientation = "v"))
# Print the plot
print(p)
# Layout with camera and legend configuration
p = p %>% layout(title = paste("3D Density Plot for Year", year),
scene = list(
xaxis = list(title = "Quantile"),
yaxis = list(title = "Month"),
zaxis = list(title = "Density"),
camera = list(eye = list(x = -1.5, y = 1.5, z = 0.3))),
legend = list(title = list(text = 'Months'), orientation = "v"))
# Print the plot
print(p)
# Subset the data for the current year
kde_year = filter(kde_all_apple, Year == year)
# Initialize an empty plotly object
p = plot_ly()
# Add each month as a separate trace
for (m in unique(kde_year$Month)) {
month_data = filter(kde_year, Month == m)
p = add_trace(p, data = month_data, x = ~Quantile, y = ~Month, z = ~Density,
type = 'scatter3d', mode = 'lines',
line = list(color = colors[m], width = 1.5),
name = m)  # Use month names directly for the legend
}
# Layout with camera and legend configuration
p = p %>% layout(title = paste("3D Density Plot for Year", year),
scene = list(
xaxis = list(title = "Quantile"),
yaxis = list(title = "Month"),
zaxis = list(title = "Density"),
camera = list(eye = list(x = -1.5, y = 1.5, z = 0.3))),
legend = list(title = list(text = 'Months'), orientation = "v"))
# Print the plot
print(p)
# Subset the data for the current year
kde_year = filter(kde_all_apple, Year == year)
# Initialize an empty plotly object
p = plot_ly()
# Add each month as a separate trace
for (m in unique(kde_year$Month)) {
month_data = filter(kde_year, Month == m)
p = add_trace(p, data = month_data, x = ~Quantile, y = ~Month, z = ~Density,
type = 'scatter3d', mode = 'lines',
line = list(color = colors[m], width = 1.5),
name = m)  # Use month names directly for the legend
}
# Layout with camera and legend configuration
p = p %>% layout(title = paste("3D Density Plot for Year", year),
scene = list(
xaxis = list(title = "Quantile"),
yaxis = list(title = "Month"),
zaxis = list(title = "Density"),
camera = list(eye = list(x = -1.5, y = 2, z = 0.3))),
legend = list(title = list(text = 'Months'), orientation = "v"))
# Print the plot
print(p)
# Subset the data for the current year
kde_year = filter(kde_all_apple, Year == year)
# Initialize an empty plotly object
p = plot_ly()
# Add each month as a separate trace
for (m in unique(kde_year$Month)) {
month_data = filter(kde_year, Month == m)
p = add_trace(p, data = month_data, x = ~Quantile, y = ~Month, z = ~Density,
type = 'scatter3d', mode = 'lines',
line = list(color = colors[m], width = 1.5),
name = m)  # Use month names directly for the legend
}
# Layout with camera and legend configuration
p = p %>% layout(title = paste("3D Density Plot for Year", year),
scene = list(
xaxis = list(title = "Quantile"),
yaxis = list(title = "Month"),
zaxis = list(title = "Density"),
camera = list(eye = list(x = -1.5, y = 3, z = 0.3))),
legend = list(title = list(text = 'Months'), orientation = "v"))
# Print the plot
print(p)
year = 2016
# Subset the data for the current year
kde_year = filter(kde_all_apple, Year == year)
# Initialize an empty plotly object
p = plot_ly()
# Add each month as a separate trace
for (m in unique(kde_year$Month)) {
month_data = filter(kde_year, Month == m)
p = add_trace(p, data = month_data, x = ~Quantile, y = ~Month, z = ~Density,
type = 'scatter3d', mode = 'lines',
line = list(color = colors[m], width = 1.5),
name = m)  # Use month names directly for the legend
}
# Layout with camera and legend configuration
p = p %>% layout(title = paste("3D Density Plot for Year", year),
scene = list(
xaxis = list(title = "Quantile"),
yaxis = list(title = "Month"),
zaxis = list(title = "Density"),
camera = list(eye = list(x = -1.5, y = 2, z = 0.3))),
legend = list(title = list(text = 'Months'), orientation = "v"))
# Print the plot
print(p)
# Subset the data for the current year
kde_year = filter(kde_all_apple, Year == year)
# Initialize an empty plotly object
p = plot_ly()
# Add each month as a separate trace
for (m in unique(kde_year$Month)) {
month_data = filter(kde_year, Month == m)
p = add_trace(p, data = month_data, x = ~Quantile, y = ~Month, z = ~Density,
type = 'scatter3d', mode = 'lines',
line = list(color = colors[m], width = 1.5),
name = m)  # Use month names directly for the legend
}
# Layout with camera and legend configuration
p = p %>% layout(title = paste("3D Density Plot for Year", year),
scene = list(
xaxis = list(title = "Quantile"),
yaxis = list(title = "Month"),
zaxis = list(title = "Density"),
camera = list(eye = list(x = -1.5, y = 2.5, z = 0.3))),
legend = list(title = list(text = 'Months'), orientation = "v"))
# Print the plot
print(p)
# Subset the data for the current year
kde_year = filter(kde_all_apple, Year == year)
# Initialize an empty plotly object
p = plot_ly()
# Add each month as a separate trace
for (m in unique(kde_year$Month)) {
month_data = filter(kde_year, Month == m)
p = add_trace(p, data = month_data, x = ~Quantile, y = ~Month, z = ~Density,
type = 'scatter3d', mode = 'lines',
line = list(color = colors[m], width = 2),
name = m)  # Use month names directly for the legend
}
# Layout with camera and legend configuration
p = p %>% layout(title = paste("3D Density Plot for Year", year),
scene = list(
xaxis = list(title = "Quantile"),
yaxis = list(title = "Month"),
zaxis = list(title = "Density"),
camera = list(eye = list(x = -1.5, y = 2.5, z = 0.3))),
legend = list(title = list(text = 'Months'), orientation = "v"))
# Print the plot
print(p)
# Subset the data for the current year
kde_year = filter(kde_all_apple, Year == year)
# Initialize an empty plotly object
p = plot_ly()
# Add each month as a separate trace
for (m in unique(kde_year$Month)) {
month_data = filter(kde_year, Month == m)
p = add_trace(p, data = month_data, x = ~Quantile, y = ~Month, z = ~Density,
type = 'scatter3d', mode = 'lines',
line = list(color = colors[m], width = 3),
name = m)  # Use month names directly for the legend
}
# Layout with camera and legend configuration
p = p %>% layout(title = paste("3D Density Plot for Year", year),
scene = list(
xaxis = list(title = "Quantile"),
yaxis = list(title = "Month"),
zaxis = list(title = "Density"),
camera = list(eye = list(x = -1.5, y = 2.5, z = 0.3))),
legend = list(title = list(text = 'Months'), orientation = "v"))
# Print the plot
print(p)
# Read the kde results
kde_result_FTSE = readRDS(file = "Data/Fitted_RDS/kde_result_FTSE.rds")
# Combine all KDE results into a single data frame
kde_all_FTSE = do.call(rbind, kde_result_FTSE)
# Prepare the data by ensuring Month and Month_num are correctly formatted
kde_all_FTSE$Month = factor(kde_all_FTSE$Month, levels = 1:12, labels = month.name)
kde_all_FTSE$Month_num = as.numeric(kde_all_FTSE$Month)
# Assuming 'years' is a vector of years to plot
years = unique(kde_all_FTSE$Year)
# Subset the data for the current year
kde_year = filter(kde_all_FTSE, Year == year)
# Initialize an empty plotly object
p = plot_ly()
# Add each month as a separate trace
for (m in unique(kde_year$Month)) {
month_data = filter(kde_year, Month == m)
p = add_trace(p, data = month_data, x = ~Quantile, y = ~Month, z = ~Density,
type = 'scatter3d', mode = 'lines',
line = list(color = colors[m], width = 3),
name = m)  # Use month names directly for the legend
}
# Layout with camera and legend configuration
p = p %>% layout(title = paste("3D Density Plot for Year", year),
scene = list(
xaxis = list(title = "Quantile"),
yaxis = list(title = "Month"),
zaxis = list(title = "Density"),
camera = list(eye = list(x = -1.5, y = 2.5, z = 0.3))),
legend = list(title = list(text = 'Months'), orientation = "v"))
# Print the plot
print(p)
apple
# Extract the quantiles from the fit and eliminate the first column
quantiles_apple = Fit_apple$lFilter$mQ
quantiles_apple = quantiles_apple[,-1]
apple = apple[-1, ]
# Extract the year from the Date column
apple$Year = year(apple$Date)
apple$Month = month(apple$Date)
apple
# Read the cleaned data
apple = read.csv("Data/Derived/apple_cleaned.csv")
FTSE = read.csv("Data/Derived/FTSE_cleaned.csv")
# Read the RDS file fit
Fit_apple = readRDS(file = "Data/Fitted_RDS/Fit_apple.rds")
Fit_FTSE = readRDS(file = "Data/Fitted_RDS/Fit_FTSE.rds")
# Extract the quantiles from the fit and eliminate the first column
quantiles_apple = Fit_apple$lFilter$mQ
quantiles_apple = quantiles_apple[,-1]
apple = apple[-1, ]
# Extract the quantiles from the fit and eliminate the first column
quantiles_FTSE = Fit_FTSE$lFilter$mQ
quantiles_FTSE = quantiles_FTSE[,-1]
FTSE = FTSE[-1, ]
# Extract the year from the Date column
apple$Year = year(apple$Date)
apple$Month = month(apple$Date)
apple
year = 2017
month = 6
# Create the name for the variable
var_name = paste(year, month, sep = "_")
# Find the indices for the current year and month in data1
indices = which(apple$Year == as.character(year) & apple$Month == month)
# Select data from data2 using the indices
selected_data = sort(as.vector(quantiles[, unlist(indices)]))
# Create the name for the variable
var_name = paste(year, month, sep = "_")
# Find the indices for the current year and month in data1
indices = which(apple$Year == as.character(year) & apple$Month == month)
# Select data from data2 using the indices
selected_data = sort(as.vector(quantiles_apple[, unlist(indices)]))
# Assign the selected data to a dynamically named variable
assign(var_name, selected_data)
library(plotly)
citation("plotly")
