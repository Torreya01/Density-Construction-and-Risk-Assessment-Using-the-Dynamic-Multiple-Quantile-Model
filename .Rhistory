true_density = dnorm(data[, i], mean = mean1, sd = sqrt(var1))
MSE[i] = mean((true_density - estimated_density)^2)
}
MSE = mean(MSE)
}
f_Y_vector = function(y, mean_t, sd_t, t) {
# Compute the density values for each quantile
t_density <- dt((y - mean_t) / (sd_t / sqrt(2)), t)
scale_factor <- 1 / (sd_t / sqrt(2))
return(t_density * scale_factor)
}
MSE_t = function(data, kernel, bwd, freedom, size){
MSE = rep(0, size)
for (i in seq(1:size)){
bw = npudensbw(data[, i], ckertype = kernel, bwmethod = bwd)
kde = npudens(data[, i], bws = bw, ckertype = kernel)
kde_frame = data.frame(Quantile = kde$eval$data, Density = kde$dens)
estimated_density = kde_frame$Density
true_density = f_Y_vector(data[,i], mean_t, sd_t, t)
MSE[i] = mean((true_density - estimated_density)^2)
}
MSE = mean(MSE)
}
# Results for the first Gaussian distribution
## Small samples
optimal_1_ls_small = MSE_Gaussian(quantiles_small_1, "epanechnikov", "cv.ls", mean1, var1, small)
optimal_1_ls_small
MSE_t = function(data, kernel, bwd, freedom, size){
MSE = rep(0, size)
for (i in seq(1:size)){
bw = npudensbw(data[, i], ckertype = kernel, bwmethod = bwd)
kde = npudens(data[, i], bws = bw, ckertype = kernel)
kde_frame = data.frame(Quantile = kde$eval$data, Density = kde$dens)
estimated_density = kde_frame$Density
true_density = f_Y_vector(data[,i], mean_t, sd_t, t)
MSE[i] = mean((true_density - estimated_density)^2)
}
MSE = mean(MSE)
}
bw = npudensbw(data[, i], ckertype = kernel, bwmethod = bwd)
kde = npudens(data[, i], bws = bw, ckertype = kernel)
kde_frame = data.frame(Quantile = kde$eval$data, Density = kde$dens)
estimated_density = kde_frame$Density
true_density = f_Y_vector(data[,i], mean_t, sd_t, t)
MSE[i] = mean((true_density - estimated_density)^2)
estimated_density
true_density
data = quantiles_small_1
bw = npudensbw(data[, i], ckertype = kernel, bwmethod = bwd)
kde = npudens(data[, i], bws = bw, ckertype = kernel)
kde_frame = data.frame(Quantile = kde$eval$data, Density = kde$dens)
estimated_density = kde_frame$Density
true_density = dnorm(data[, i], mean = mean1, sd = sqrt(var1))
MSE[i] = mean((true_density - estimated_density)^2)
estimated_density
true_density
bw = npudensbw(data[, i], ckertype = kernel, bwmethod = bwd)
kde = npudens(data[, i], bws = bw, ckertype = kernel)
kde_frame = data.frame(Quantile = kde$eval$data, Density = kde$dens)
estimated_density = kde_frame$Density
quantiles_small_4
estimated_density
data = quantiles_small_4
bw = npudensbw(data[, i], ckertype = kernel, bwmethod = bwd)
kde = npudens(data[, i], bws = bw, ckertype = kernel)
kde_frame = data.frame(Quantile = kde$eval$data, Density = kde$dens)
estimated_density = kde_frame$Density
estimated_density
kde_frame$Quantile
# Transform the samples with specific mean and variance
samples_t_small = mean_t + sd_t * samples_t_small / sqrt(2)
samples_t_small = rt(small, 4)
samples_t_medium = rt(medium, 4)
samples_t_large = rt(large, 4)
# Transform the samples with specific mean and variance
samples_t_small = mean_t + sd_t * samples_t_small / sqrt(2)
samples_t_medium = mean_t + sd_t * samples_t_medium / sqrt(2)
samples_t_small = mean_t + sd_t * samples_t_small / sqrt(2)
mean(samples_t_small)
sd(samples_t_small)
sqrt(0.0003)
sd(samples_t_medium)
samples_t_small = rt(small, 4)
samples_t_medium = rt(medium, 4)
samples_t_large = rt(large, 4)
# Transform the samples with specific mean and variance
samples_t_small = mean_t + sd_t * samples_t_small / sqrt(2)
samples_t_medium = mean_t + sd_t * samples_t_medium / sqrt(2)
samples_t_small = mean_t + sd_t * samples_t_small / sqrt(2)
sd(samples_t_medium)
sd(samples_t_small)
# Parameters for student-t distribution with degree of freedom 4
t = 4
sd_t = sqrt(0.0003)
mean_t = 0.0009
# Set the number of the distribution
small = 200
medium = 500
large = 1000
samples_t_small = rt(small, 4)
# Generate samples
set.seed(123)
samples_t_small = rt(small, 4)
samples_t_medium = rt(medium, 4)
samples_t_large = rt(large, 4)
# Transform the samples with specific mean and variance
samples_t_small = mean_t + sd_t * samples_t_small / sqrt(2)
samples_t_medium = mean_t + sd_t * samples_t_medium / sqrt(2)
samples_t_small = mean_t + sd_t * samples_t_small / sqrt(2)
sd(samples_t_small)
sd(samples_t_medium)
sd(samples_t_large
)
# Generate samples
set.seed(123)
samples_normal_small_1 = rnorm(small, mean1, sqrt(var1))
samples_normal_medium_1 = rnorm(medium, mean1, sqrt(var1))
samples_normal_large_1 = rnorm(large, mean1, sqrt(var1))
samples_normal_small_2 = rnorm(small, mean2, sqrt(var2))
samples_normal_medium_2 = rnorm(medium, mean2, sqrt(var2))
samples_normal_large_2 = rnorm(large, mean2, sqrt(var2))
samples_small_mixed = sample_mixed_gaussian(small, c(mean_mix1, mean_mix2), c(var_mix1, var_mix2), prob_mix)
samples_medium_mixed = sample_mixed_gaussian(medium, c(mean_mix1, mean_mix2), c(var_mix1, var_mix2), prob_mix)
samples_large_mixed = sample_mixed_gaussian(large, c(mean_mix1, mean_mix2), c(var_mix1, var_mix2), prob_mix)
samples_t_small = rt(small, 4)
samples_t_medium = rt(medium, 4)
samples_t_large = rt(large, 4)
# Transform the samples with specific mean and variance
samples_t_small_transformed = mean_t + sd_t * samples_t_small / sqrt(2)
samples_t_medium_transformed = mean_t + sd_t * samples_t_medium / sqrt(2)
samples_t_large_transformed = mean_t + sd_t * samples_t_small / sqrt(2)
sd(samples_t_small_transformed)
sqrt(0.0003)
mean(samples_t_small_transformed)
mean(samples_t_medium_transformed)
sd(samples_t_small_transformed)
sd(samples_t_medium_transformed)
sd(samples_t_large_transformed)
samples_t_small = rt(small, 4)
samples_t_medium = rt(medium, 4)
samples_t_large = rt(large, 4)
# Transform the samples with specific mean and variance
samples_t_small_transformed = mean_t + sd_t * samples_t_small / sqrt(2)
samples_t_medium_transformed = mean_t + sd_t * samples_t_medium / sqrt(2)
samples_t_large_transformed = mean_t + sd_t * samples_t_large / sqrt(2)
sd(samples_t_large_transformed)
mean(samples_t_large_transformed)
# Generate samples
set.seed(123)
samples_normal_small_1 = rnorm(small, mean1, sqrt(var1))
samples_normal_medium_1 = rnorm(medium, mean1, sqrt(var1))
samples_normal_large_1 = rnorm(large, mean1, sqrt(var1))
samples_normal_small_2 = rnorm(small, mean2, sqrt(var2))
samples_normal_medium_2 = rnorm(medium, mean2, sqrt(var2))
samples_normal_large_2 = rnorm(large, mean2, sqrt(var2))
samples_small_mixed = sample_mixed_gaussian(small, c(mean_mix1, mean_mix2), c(var_mix1, var_mix2), prob_mix)
samples_medium_mixed = sample_mixed_gaussian(medium, c(mean_mix1, mean_mix2), c(var_mix1, var_mix2), prob_mix)
samples_large_mixed = sample_mixed_gaussian(large, c(mean_mix1, mean_mix2), c(var_mix1, var_mix2), prob_mix)
samples_t_small = rt(small, 4)
samples_t_medium = rt(medium, 4)
samples_t_large = rt(large, 4)
# Transform the samples with specific mean and variance
samples_t_small_transformed = mean_t + sd_t * samples_t_small / sqrt(2)
samples_t_medium_transformed = mean_t + sd_t * samples_t_medium / sqrt(2)
samples_t_large_transformed = mean_t + sd_t * samples_t_large / sqrt(2)
Fit_small_4 = EstimateDMQ(vY = samples_t_small_transformed, vTau = vTau,
iTau_star = 50,  # Median as reference
FixReference = TRUE,
fn.optimizer = fn.solnp)
Fit_medium_4 = EstimateDMQ(vY = samples_t_medium_transformed, vTau = vTau,
iTau_star = 50,  # Median as reference
FixReference = TRUE,
fn.optimizer = fn.solnp)
Fit_large_4 = EstimateDMQ(vY = samples_t_large_transformed, vTau = vTau,
iTau_star = 50,  # Median as reference
FixReference = TRUE,
fn.optimizer = fn.solnp)
saveRDS(Fit_small_4, file = "Data/Fitted_RDS/Simulation_Fit_small_4.rds")
saveRDS(Fit_medium_4, file = "Data/Fitted_RDS/Simulation_Fit_medium_4.rds")
saveRDS(Fit_large_4, file = "Data/Fitted_RDS/Simulation_Fit_large_4.rds")
Fit_small_4 = readRDS("Data/Fitted_RDS/Simulation_Fit_small_4.rds")
Fit_medium_4 = readRDS("Data/Fitted_RDS/Simulation_Fit_medium_4.rds")
Fit_large_4 = readRDS("Data/Fitted_RDS/Simulation_Fit_large_4.rds")
quantiles_small_4 = Fit_small_4$lFilter$mQ[,-1]
quantiles_medium_4 = Fit_medium_4$lFilter$mQ[,-1]
quantiles_large_4 = Fit_large_4$lFilter$mQ[,-1]
MSE_Gaussian = function(data, kernel, bwd, mean, var, size){
MSE = rep(0, size)
for (i in seq(1:size)){
bw = npudensbw(data[, i], ckertype = kernel, bwmethod = bwd)
kde = npudens(data[, i], bws = bw, ckertype = kernel)
kde_frame = data.frame(Quantile = kde$eval$data, Density = kde$dens)
estimated_density = kde_frame$Density
true_density = dnorm(data[, i], mean = mean1, sd = sqrt(var1))
MSE[i] = mean((true_density - estimated_density)^2)
}
MSE = mean(MSE)
}
f_Y_vector = function(y, mean_t, sd_t, t) {
# Compute the density values for each quantile
t_density = dt((y - mean_t) / (sd_t / sqrt(2)), t)
scale_factor = 1 / (sd_t / sqrt(2))
return(t_density * scale_factor)
}
MSE_t = function(data, kernel, bwd, freedom, size){
MSE = rep(0, size)
for (i in seq(1:size)){
bw = npudensbw(data[, i], ckertype = kernel, bwmethod = bwd)
kde = npudens(data[, i], bws = bw, ckertype = kernel)
kde_frame = data.frame(Quantile = kde$eval$data, Density = kde$dens)
estimated_density = kde_frame$Density
true_density = f_Y_vector(data[,i], mean_t, sd_t, t)
MSE[i] = mean((true_density - estimated_density)^2)
}
MSE = mean(MSE)
}
bw = npudensbw(data[, i], ckertype = kernel, bwmethod = bwd)
data
kde = npudens(data[, i], bws = bw, ckertype = kernel)
kde_frame = data.frame(Quantile = kde$eval$data, Density = kde$dens)
estimated_density = kde_frame$Density
true_density = f_Y_vector(data[,i], mean_t, sd_t, t)
estimated_density
true_density
data = optimal_4_ls_large
data = quantiles_large_4
bw = npudensbw(data[, i], ckertype = kernel, bwmethod = bwd)
kde = npudens(data[, i], bws = bw, ckertype = kernel)
kde_frame = data.frame(Quantile = kde$eval$data, Density = kde$dens)
estimated_density = kde_frame$Density
true_density = f_Y_vector(data[,i], mean_t, sd_t, t)
estimated_density
true_density
MSE_t = function(data, kernel, bwd, freedom, size){
MSE = rep(0, size)
for (i in seq(1:size)){
bw = npudensbw(data[, i], ckertype = kernel, bwmethod = bwd)
kde = npudens(data[, i], bws = bw, ckertype = kernel)
kde_frame = data.frame(Quantile = kde$eval$data, Density = kde$dens)
estimated_density = kde_frame$Density
true_density = f_Y_vector(data[,i], mean_t, sd_t, t)
MSE[i] = mean((true_density - estimated_density)^2)
}
MSE = mean(MSE)
}
## Large samples
optimal_4_ls_large = MSE_t(quantiles_large_4, "epanechnikov", "cv.ls", t, large)
optimal_4_ls_large
optimal_1_ml_small = MSE_Gaussian(quantiles_small_1, "epanechnikov", "cv.ml", mean1, var1, small)
gaussian_1_ls_small = MSE_Gaussian(quantiles_small_1, "gaussian", "cv.ls", mean1, var1, small)
gaussian_1_ml_small = MSE_Gaussian(quantiles_small_1, "gaussian", "cv.ml", mean1, var1, small)
## Medium samples
optimal_1_ls_medium = MSE_Gaussian(quantiles_medium_1, "epanechnikov", "cv.ls", mean1, var1, medium)
optimal_1_ml_medium = MSE_Gaussian(quantiles_medium_1, "epanechnikov", "cv.ml", mean1, var1, medium)
gaussian_1_ls_medium = MSE_Gaussian(quantiles_medium_1, "gaussian", "cv.ls", mean1, var1, medium)
gaussian_1_ml_medium = MSE_Gaussian(quantiles_medium_1, "gaussian", "cv.ml", mean1, var1, medium)
## Large samples
optimal_1_ls_large = MSE_Gaussian(quantiles_large_1, "epanechnikov", "cv.ls", mean1, var1, large)
optimal_1_ml_large = MSE_Gaussian(quantiles_large_1, "epanechnikov", "cv.ml", mean1, var1, large)
gaussian_1_ls_large = MSE_Gaussian(quantiles_large_1, "gaussian", "cv.ls", mean1, var1, large)
gaussian_1_ml_large = MSE_Gaussian(quantiles_large_1, "gaussian", "cv.ml", mean1, var1, large)
# Results for the second Gaussian distribution
## Small samples
optimal_2_ls_small = MSE_Gaussian(quantiles_small_2, "epanechnikov", "cv.ls", mean2, var2, small)
optimal_2_ml_small = MSE_Gaussian(quantiles_small_2, "epanechnikov", "cv.ml", mean2, var2, small)
gaussian_2_ls_small = MSE_Gaussian(quantiles_small_2, "gaussian", "cv.ls", mean2, var2, small)
gaussian_2_ml_small = MSE_Gaussian(quantiles_small_2, "gaussian", "cv.ml", mean2, var2, small)
## Medium samples
optimal_2_ls_medium = MSE_Gaussian(quantiles_medium_2, "epanechnikov", "cv.ls", mean2, var2, medium)
optimal_2_ml_medium = MSE_Gaussian(quantiles_medium_2, "epanechnikov", "cv.ml", mean2, var2, medium)
gaussian_2_ls_medium = MSE_Gaussian(quantiles_medium_2, "gaussian", "cv.ls", mean2, var2, medium)
gaussian_2_ml_medium = MSE_Gaussian(quantiles_medium_2, "gaussian", "cv.ml", mean2, var2, medium)
## Large samples
optimal_2_ls_large = MSE_Gaussian(quantiles_large_2, "epanechnikov", "cv.ls", mean2, var2, large)
optimal_2_ml_large = MSE_Gaussian(quantiles_large_2, "epanechnikov", "cv.ml", mean2, var2, large)
gaussian_2_ls_large = MSE_Gaussian(quantiles_large_2, "gaussian", "cv.ls", mean2, var2, large)
gaussian_2_ml_large = MSE_Gaussian(quantiles_large_2, "gaussian", "cv.ml", mean2, var2, large)
# Results for the third Gaussian mix distribution
## Small samples
optimal_3_ls_small = MSE_Gaussian(quantiles_small_3, "epanechnikov", "cv.ls", mean_mix, var_mix, small)
optimal_3_ml_small = MSE_Gaussian(quantiles_small_3, "epanechnikov", "cv.ml", mean_mix, var_mix, small)
gaussian_3_ls_small = MSE_Gaussian(quantiles_small_3, "gaussian", "cv.ls", mean_mix, var_mix, small)
gaussian_3_ml_small = MSE_Gaussian(quantiles_small_3, "gaussian", "cv.ml", mean_mix, var_mix, small)
## Medium samples
optimal_3_ls_medium = MSE_Gaussian(quantiles_medium_3, "epanechnikov", "cv.ls", mean_mix, var_mix, medium)
optimal_3_ml_medium = MSE_Gaussian(quantiles_medium_3, "epanechnikov", "cv.ml", mean_mix, var_mix, medium)
gaussian_3_ls_medium = MSE_Gaussian(quantiles_medium_3, "gaussian", "cv.ls", mean_mix, var_mix, medium)
gaussian_3_ml_medium = MSE_Gaussian(quantiles_medium_3, "gaussian", "cv.ml", mean_mix, var_mix, medium)
## Large samples
optimal_3_ls_large = MSE_Gaussian(quantiles_large_3, "epanechnikov", "cv.ls", mean_mix, var_mix, large)
optimal_3_ml_large = MSE_Gaussian(quantiles_large_3, "epanechnikov", "cv.ml", mean_mix, var_mix, large)
gaussian_3_ls_large = MSE_Gaussian(quantiles_large_3, "gaussian", "cv.ls", mean_mix, var_mix, large)
gaussian_3_ml_large = MSE_Gaussian(quantiles_large_3, "gaussian", "cv.ml", mean_mix, var_mix, large)
# Results for the student-t distribution
## Small samples
optimal_4_ls_small = MSE_t(quantiles_small_4, "epanechnikov", "cv.ls", t, small)
optimal_4_ml_small = MSE_t(quantiles_small_4, "epanechnikov", "cv.ml", t, small)
gaussian_4_ls_small = MSE_t(quantiles_small_4, "gaussian", "cv.ls", t, small)
gaussian_4_ml_small = MSE_t(quantiles_small_4, "gaussian", "cv.ml", t, small)
## Medium samples
optimal_4_ls_medium = MSE_t(quantiles_medium_4, "epanechnikov", "cv.ls", t, medium)
optimal_4_ml_medium = MSE_t(quantiles_medium_4, "epanechnikov", "cv.ml", t, medium)
gaussian_4_ls_medium = MSE_t(quantiles_medium_4, "gaussian", "cv.ls", t, medium)
gaussian_4_ml_medium = MSE_t(quantiles_medium_4, "gaussian", "cv.ml", t, medium)
## Large samples
optimal_4_ls_large = MSE_t(quantiles_large_4, "epanechnikov", "cv.ls", t, large)
optimal_4_ml_large = MSE_t(quantiles_large_4, "epanechnikov", "cv.ml", t, large)
gaussian_4_ls_large = MSE_t(quantiles_large_4, "gaussian", "cv.ls", t, large)
gaussian_4_ml_large = MSE_t(quantiles_large_4, "gaussian", "cv.ml", t, large)
optimal_4_ls_large
optimal_4_ml_large
gaussian_4_ls_large
gaussian_4_ml_large
optimal_4_ls_medium
optimal_4_ml_medium
gaussian_4_ls_medium
gaussian_4_ml_medium
optimal_4_ls_small
optimal_4_ml_small
gaussian_4_ls_small
gaussian_4_ml_small
optimal_3_ls_large
optimal_3_ml_large
gaussian_3_ls_large
optimal_3_ls_large
optimal_3_ml_large
gaussian_3_ls_large
gaussian_3_ml_large
optimal_3_ls_medium
optimal_3_ml_medium
gaussian_3_ls_medium
gaussian_3_ml_medium
optimal_3_ls_small
optimal_3_ml_small
gaussian_3_ls_small
gaussian_3_ml_small
optimal_2_ls_large
optimal_2_ml_large
gaussian_2_ls_large
gaussian_2_ml_large
optimal_2_ls_medium
optimal_2_ml_medium
gaussian_2_ls_medium
gaussian_2_ml_medium
optimal_2_ls_small
optimal_2_ml_small
gaussian_2_ls_small
gaussian_2_ml_small
optimal_1_ls_large
optimal_1_ml_large
gaussian_1_ls_large
gaussian_1_ml_large
optimal_1_ls_medium
optimal_1_ml_medium
gaussian_1_ls_medium
gaussian_1_ml_medium
optimal_1_ls_small
optimal_1_ml_small
gaussian_1_ls_small
gaussian_1_ml_small
# Import libraries
library(DMQ)
library(np)
library(ks)
library(ggplot2)
library(moments)
library(dplyr)
library(lubridate)
library(scales)
library(PerformanceAnalytics)
library(ismev)
library(evir)
library(evd)
library(plotly)
library(dplyr)
# Define the color palette with named colors corresponding to month names
colors <- c("black", "blue", "red", "green", "purple", "yellow", "orange", "pink", "cyan", "brown", "magenta", "turquoise")
names(colors) <- month.name  # Ensure that colors are named by month names for easy referencing
year = 2020
# Prepare the data by ensuring Month and Month_num are correctly formatted
kde_all$Month <- factor(kde_all$Month, levels = 1:12, labels = month.name)
kde_all$Month_num <- as.numeric(kde_all$Month)
# Subset the data for the current year
kde_year <- filter(kde_all, Year == year)
camera_eye <- list(x = -1, y = 2, z = 0.2)
# Create the 3D plot with adjusted axes
p <- plot_ly(data = kde_year, x = ~Quantile, y = ~Month, z = ~Density,
type = 'scatter3d', mode = 'lines',
line = list(color = ~I(colors[as.character(Month)]), width = 1.5)) %>%
layout(title = paste("3D Density Plot for Year", year),
scene = list(
xaxis = list(title = "Quantile"),
yaxis = list(title = "Month"),  # Month on y-axis
zaxis = list(title = "Density"),
camera = list(eye = camera_eye)),
legend = list(title = list(text = 'Months'), orientation = "v"))  # Density on z-axis
# Print the plot; use print() if in a non-interactive environment or within certain IDEs like RStudio
print(p)
# Add the camera eye
camera_eye <- list(x = -1, y = 2, z = 0.2)
# Subset the data for the current year
kde_year <- filter(kde_all, Year == year)
# Initialize an empty plotly object
p <- plot_ly()
# Add each month as a separate trace
for (m in unique(kde_year$Month)) {
month_data <- filter(kde_year, Month == m)
p <- add_trace(p, data = month_data, x = ~Quantile, y = ~Month, z = ~Density,
type = 'scatter3d', mode = 'lines',
line = list(color = colors[m], width = 1.5),
name = m)  # Use month names directly for the legend
}
# Layout with camera and legend configuration
p <- p %>% layout(title = paste("3D Density Plot for Year", year),
scene = list(
xaxis = list(title = "Quantile"),
yaxis = list(title = "Month"),
zaxis = list(title = "Density"),
camera = list(eye = list(x = -1, y = 2, z = 0.3))),
legend = list(title = list(text = 'Months'), orientation = "v"))
# Print the plot
print(p)
# Subset the data for the current year
kde_year <- filter(kde_all, Year == year)
# Initialize an empty plotly object
p <- plot_ly()
# Add each month as a separate trace
for (m in unique(kde_year$Month)) {
month_data <- filter(kde_year, Month == m)
p <- add_trace(p, data = month_data, x = ~Quantile, y = ~Month, z = ~Density,
type = 'scatter3d', mode = 'lines',
line = list(color = colors[m], width = 1.5),
name = m)  # Use month names directly for the legend
}
# Layout with camera and legend configuration
p <- p %>% layout(title = paste("3D Qauntile Density Plot in Year", year, "for Apple Inc log-returns"),
scene = list(
xaxis = list(title = "Quantile"),
yaxis = list(title = "Month"),
zaxis = list(title = "Density"),
camera = list(eye = list(x = -1, y = 2, z = 0.3))),
legend = list(title = list(text = 'Months'), orientation = "h"))
# Print the plot
print(p)
# Subset the data for the current year
kde_year <- filter(kde_all, Year == year)
# Initialize an empty plotly object
p <- plot_ly()
# Add each month as a separate trace
for (m in unique(kde_year$Month)) {
month_data <- filter(kde_year, Month == m)
p <- add_trace(p, data = month_data, x = ~Quantile, y = ~Month, z = ~Density,
type = 'scatter3d', mode = 'lines',
line = list(color = colors[m], width = 1.5),
name = m)  # Use month names directly for the legend
}
# Layout with camera and legend configuration
p <- p %>% layout(title = paste("3D Qauntile Density Plot in Year", year, "for Apple Inc log-returns"),
scene = list(
xaxis = list(title = "Quantile"),
yaxis = list(title = "Month"),
zaxis = list(title = "Density"),
camera = list(eye = list(x = -1, y = 2, z = 0.3))),
legend = list(title = list(text = 'Months'), orientation = "v"))
# Print the plot
print(p)
# Subset the data for the current year
kde_year <- filter(kde_all, Year == year)
# Initialize an empty plotly object
p <- plot_ly()
# Add each month as a separate trace
for (m in unique(kde_year$Month)) {
month_data <- filter(kde_year, Month == m)
p <- add_trace(p, data = month_data, x = ~Quantile, y = ~Month, z = ~Density,
type = 'scatter3d', mode = 'lines',
line = list(color = colors[m], width = 1.5),
name = m)  # Use month names directly for the legend
}
# Layout with camera and legend configuration
p <- p %>% layout(title = paste("Qauntile Density Plot in Year", year, "for Apple Inc log-returns"),
scene = list(
xaxis = list(title = "Quantile"),
yaxis = list(title = "Month"),
zaxis = list(title = "Density"),
camera = list(eye = list(x = -1, y = 2, z = 0.3))),
legend = list(title = list(text = 'Months'), orientation = "v"))
# Print the plot
print(p)
for (year in years) {
# Subset the data for the current year
kde_year <- filter(kde_all, Year == year)
# Initialize an empty plotly object
p <- plot_ly()
# Add each month as a separate trace
for (m in unique(kde_year$Month)) {
month_data <- filter(kde_year, Month == m)
p <- add_trace(p, data = month_data, x = ~Quantile, y = ~Month, z = ~Density,
type = 'scatter3d', mode = 'lines',
line = list(color = colors[m], width = 1.5),
name = m)  # Use month names directly for the legend
}
# Layout with camera and legend configuration
p <- p %>% layout(title = paste("Qauntile Density Plot in Year", year, "for Apple Inc log-returns"),
scene = list(
xaxis = list(title = "Quantile"),
yaxis = list(title = "Month"),
zaxis = list(title = "Density"),
camera = list(eye = list(x = -1, y = 2, z = 0.3))),
legend = list(title = list(text = 'Months'), orientation = "v"))
# Print the plot
print(p)
}
